name: Tests

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  build-folder: build
  cppstd: 17
  python-version: 3.9

jobs:
  clang-format:
    name: clang-format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Clang format
        shell: bash
        run: |
          linter_errors=$(git-clang-format-12 --commit "HEAD~1" --diff -q || true)
          echo "$linter_errors"
          if [ ! -z "$linter_errors" ]; then echo "Detected formatting issues; please fix"; exit 1; else echo "Formatting is correct"; exit 0; fi

  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: clang-format
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: Clang-Tidy Clang 12 x86 64 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=12 -s compiler=clang -s compiler.libcxx=libstdc++11
                -e CC=clang-12 -e CXX=clang++-12
                -o clang_tidy=clang-tidy-12,
            }

          - {
              name: Address Sanitizer GCC 10 x86 64 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=10.3 -s compiler=gcc -s compiler.libcxx=libstdc++11
                -e CC=gcc-10 -e CXX=g++-10
                -e CFLAGS=-fsanitize=address -e CXXFLAGS=-fsanitize=address
                -o tests=True,
            }
          - {
              name: Address Sanitizer Clang 12 x86 64 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=12 -s compiler=clang -s compiler.libcxx=libstdc++11
                -e CC=clang-12 -e CXX=clang++-12
                -e CFLAGS=-fsanitize=address -e CXXFLAGS=-fsanitize=address
                -o tests=True,
            }

          - {
              name: Thread Sanitizer GCC 10 x86 64 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=10.3 -s compiler=gcc -s compiler.libcxx=libstdc++11
                -e CC=gcc-10 -e CXX=g++-10
                -e CFLAGS=-fsanitize=thread -e CXXFLAGS=-fsanitize=thread
                -o tests=True,
            }
          - {
              name: Thread Sanitizer Clang 12 x86 64 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=12 -s compiler=clang -s compiler.libcxx=libstdc++11
                -e CC=clang-12 -e CXX=clang++-12
                -e CFLAGS=-fsanitize=thread -e CXXFLAGS=-fsanitize=thread
                -o tests=True,
            }

          - {
              name: Undefined Behavior Sanitizer GCC 10 x86 64 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=10.3 -s compiler=gcc -s compiler.libcxx=libstdc++11
                -e CC=gcc-10 -e CXX=g++-10
                -e CFLAGS=-fsanitize=undefined -e CXXFLAGS=-fsanitize=undefined
                -o tests=True,
            }
          - {
              name: Undefined Behavior Sanitizer Clang 12 x86 64 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=12 -s compiler=clang -s compiler.libcxx=libstdc++11
                -e CC=clang-12 -e CXX=clang++-12
                -e CFLAGS=-fsanitize=undefined -e CXXFLAGS=-fsanitize=undefined
                -o tests=True,
            }

          - {
              name: Windows MSVC 19.29 x86 64 Debug,
              os: windows-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=16 -s compiler="Visual Studio"
                -s compiler.toolset=v142 -s compiler.runtime=MDd
                -e CC=cl -e CXX=cl
                -o tests=True,
            }
          - {
              name: Windows MSVC 19.29 x86 64 RelWithDebInfo,
              os: windows-latest,
              build_type: RelWithDebInfo,
              install: -s arch_target=x86_64
                -s compiler.version=16 -s compiler="Visual Studio"
                -s compiler.toolset=v142 -s compiler.runtime=MD
                -e CC=cl -e CXX=cl
                -o tests=True,
            }

          - {
              name: Ubuntu GCC 10 x86 64 libstdc++11 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=10.3 -s compiler=gcc -s compiler.libcxx=libstdc++11
                -e CC=gcc-10 -e CXX=g++-10
                -o tests=True,
            }
          - {
              name: Ubuntu GCC 10 x86 64 libstdc++11 RelWithDebInfo,
              os: ubuntu-latest,
              build_type: RelWithDebInfo,
              install: -s arch_target=x86_64
                -s compiler.version=10.3 -s compiler=gcc -s compiler.libcxx=libstdc++11
                -e CC=gcc-10 -e CXX=g++-10
                -o tests=True,
            }

          - {
              name: Ubuntu Clang 12 x86 64 libstdc++11 Debug,
              os: ubuntu-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=12 -s compiler=clang -s compiler.libcxx=libstdc++11
                -e CC=clang-12 -e CXX=clang++-12
                -o tests=True,
            }
          - {
              name: Ubuntu Clang 12 x86 64 libstdc++11 RelWithDebInfo,
              os: ubuntu-latest,
              build_type: RelWithDebInfo,
              install: -s arch_target=x86_64
                -s compiler.version=12 -s compiler=clang -s compiler.libcxx=libstdc++11
                -e CC=clang-12 -e CXX=clang++-12
                -o tests=True,
            }

          - {
              name: OS X Apple Clang x86 64 libc++ Debug,
              os: macos-latest,
              build_type: Debug,
              install: -s arch_target=x86_64
                -s compiler.version=12.0 -s compiler=apple-clang -s compiler.libcxx=libc++
                -e CC=clang -e CXX=clang++
                -o tests=True,
            }
          - {
              name: OS X Apple Clang x86 64 libc++ RelWithDebInfo,
              os: macos-latest,
              build_type: RelWithDebInfo,
              install: -s arch_target=x86_64
                -s compiler.version=12.0 -s compiler=apple-clang -s compiler.libcxx=libc++
                -e CC=clang -e CXX=clang++
                -o tests=True,
            }

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install requirements
        run: python -m pip install --upgrade pip conan

      - name: Install dependencies
        run: conan install . -g cmake -if ${{ env.build-folder }} -b outdated
          -s compiler.cppstd=${{ env.cppstd }} -s build_type=${{ matrix.config.build_type }}
          ${{ matrix.config.install }}

      - name: Build
        run: conan build . -bf ${{ env.build-folder }}

      - name: Test
        run: ctest -C ${{ matrix.config.build_type }}
          --output-on-failure
          --repeat-until-fail 5
          --test-dir ${{ env.build-folder }}
          --output-junit report.xml
          --timeout 30

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install requirements
        run: python -m pip install --upgrade pip conan

      - name: Install dependencies
        run: conan install . -g cmake -if build -b outdated
          -s compiler.cppstd=${{ env.cppstd }} -s build_type=Debug -s arch_target=x86_64
          -s compiler.version=10.3 -s compiler=gcc -s compiler.libcxx=libstdc++11
          -e CC=gcc-10 -e CXX=g++-10
          -o coverage=True
          -o tests=True

      - name: Build
        run: conan build . -bf ${{ env.build-folder }}

      - name: Test
        run: ctest -C Debug
          --output-on-failure
          --repeat-until-fail 1
          --test-dir ${{ env.build-folder }}
          --output-junit report.xml
          --timeout 30

      - name: Coverage
        shell: bash
        run: |
          find . -type f -name "*.gcda" -exec lcov --gcov-tool /usr/bin/gcov-10 --directory {} --capture --output-file $(basename {}).info \;
          find . -type f -name "*.gcno" -exec lcov --gcov-tool /usr/bin/gcov-10 --directory {} --capture --output-file $(basename {}).info \;
          find . -type f -name "*.info" -exec echo "--add-tracefile {}" \; | xargs lcov --gcov-tool /usr/bin/gcov-10 --output-file coverage.info
          lcov --gcov-tool /usr/bin/gcov-10 --remove coverage.info "/usr/*" "${HOME}/.conan/*" --output-file coverage.info
          lcov --gcov-tool /usr/bin/gcov-10 --list coverage.info
          genhtml -o report coverage.info

      - name: Publish Coverage Results
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: report

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: ${{ env.build-folder }}/*.xml

      - name: Publish Coverage Results to Codecov
        uses: codecov/codecov-action@v1
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.info
          flags: unittests
          name: codecov-umbrella
